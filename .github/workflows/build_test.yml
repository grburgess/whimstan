name: CI

on:
  push:
  pull_request:
  schedule:
    #At the end of every day
    - cron: 0 0 * * *

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8,3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install cmdstan
      run: |

        mkdir .cmdstan
        cd .cmdstan
        git clone https://github.com/stan-dev/cmdstan.git --recursive
        cd cmdstan
        make build
        cd ../../

    - name: Install dependencies
      run: |

        if [ "$RUNNER_OS" == "macOS" ]; then

        brew install c-blosc
        brew install hdf5

        fi

        python3 -m pip install --upgrade pip wheel;

        pip3 install cryptography pyOpenSSL pyvo pyRXP --upgrade;


        pip3 install flake8 numba numpy==1.20.3 ipython scipy h5py matplotlib coverage pytest pytest-cov cython codecov


        pip3 install tempita
        pip3 install astropy


        git clone https://github.com/threeML/astromodels.git
        cd astromodels
        git checkout dev
        python3 setup.py install
        cd ..


        git clone https://github.com/threeML/threeML.git
        cd threeML
        git checkout jmb_testing
        python3 setup.py install
        cd ..


        python setup.py install

    - name: Lint with flake8
      run: |
        flake8 whimstan

    - name: Test with pytest
      run: |
        python -m pytest -vv --cov=whimstan/ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        files: ./coverage1.xml,./coverage2.xml
        directory: ./coverage/reports/

  # package:
  #   name: Build & verify package
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9

  #     - name: Install twine
  #       run: python -m pip install twine
  #     - name: Build package
  #       run: python setup.py sdist
  #     - name: List result
  #       run: ls -l dist
  #     - name: Check long_description
  #       run: python -m twine check dist/*




  # publish:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   name: Publish package
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - name: Install twine
  #     run: python -m pip install twine
  #   - name: Build package
  #     run: python setup.py sdist
  #   - uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       user: __token__
  #       password: ${{ secrets.POPSYNTH_GITHUB_PYPI }}
